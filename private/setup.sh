#!/bin/bash
# Setup script for adnd2e-private MediaWiki instance
# This follows Saltbox's approach for multiple instances

# Define variables
CONTAINER_NAME="adnd2e-private"
DB_CONTAINER="adnd2e-private-db"
CONFIG_DIR="/opt/mediawiki/private"
DOMAIN="adnd2e-private.mayorgergich.xyz"

echo "=== Setting up AD&D 2E Private MediaWiki ==="

# Create necessary directories
echo "Creating directory structure..."
mkdir -p ${CONFIG_DIR}/images

# Clean up any existing containers if they exist
echo "Checking for existing containers..."
if docker ps -a | grep -q "${CONTAINER_NAME}"; then
    echo "Container ${CONTAINER_NAME} already exists. Removing it..."
    docker stop "${CONTAINER_NAME}" 2>/dev/null || true
    docker rm -f "${CONTAINER_NAME}" 2>/dev/null || true
fi

if docker ps -a | grep -q "${DB_CONTAINER}"; then
    echo "Container ${DB_CONTAINER} already exists. Removing it..."
    docker stop "${DB_CONTAINER}" 2>/dev/null || true
    docker rm -f "${DB_CONTAINER}" 2>/dev/null || true
fi

# Create Apache config
echo "Creating Apache configuration..."
cat > "${CONFIG_DIR}/apache-config.conf" << EOF
ServerName ${CONTAINER_NAME}

<Directory /var/www/html/images>
    # Set proper security headers
    Header set X-Content-Type-Options "nosniff"
    
    # Disable script execution in the uploads directory
    <FilesMatch "\.(php|php5|pl|py|jsp|asp|sh|cgi)$">
        Require all denied
    </FilesMatch>
</Directory>

# Enable required Apache modules
<IfModule !headers_module>
    LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so
</IfModule>
EOF

# Create LocalSettings.php
echo "Creating LocalSettings.php..."
cat > "${CONFIG_DIR}/LocalSettings.php" << EOF
<?php
# This file was automatically generated by the MediaWiki 1.43.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/MainConfigSchema.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# \$wgDisableOutputCompression = true;

\$wgSitename = "ADND2e-Private";
\$wgMetaNamespace = "AD&D2e-Private";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
\$wgScriptPath = "";

## The protocol and server name to use in fully-qualified URLs
\$wgServer = "https://${DOMAIN}";

## The URL path to static resources (images, scripts, etc.)
\$wgResourceBasePath = \$wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
\$wgLogos = [
	'1x' => "\$wgResourceBasePath/resources/assets/change-your-logo.svg",
	'icon' => "\$wgResourceBasePath/resources/assets/change-your-logo-icon.svg",
];

## UPO means: this is also a user preference option

\$wgEnableEmail = true;
\$wgEnableUserEmail = true; # UPO

\$wgEmergencyContact = "";
\$wgPasswordSender = "";

\$wgEnotifUserTalk = false; # UPO
\$wgEnotifWatchlist = false; # UPO
\$wgEmailAuthentication = true;

## Database settings
\$wgDBtype = "mysql";
\$wgDBserver = "${DB_CONTAINER}";
\$wgDBname = "mediawiki_private";
\$wgDBuser = "pawneemayor";
\$wgDBpassword = "password321";

# MySQL specific settings
\$wgDBprefix = "adnd2e_private";
\$wgDBssl = false;

# MySQL table options to use during installation or update
\$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Shared database table
# This has no effect unless \$wgSharedDB is also set.
\$wgSharedTables[] = "actor";

## Shared memory settings
\$wgMainCacheType = CACHE_NONE;
\$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
\$wgEnableUploads = true;
\$wgUseImageMagick = true;
\$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
\$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
\$wgPingback = true;

# Site language code, should be one of the list in ./includes/languages/data/Names.php
\$wgLanguageCode = "en";

# Time zone
\$wgLocaltimezone = "UTC";

## Set \$wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#\$wgCacheDirectory = "\$IP/cache";

\$wgSecretKey = "$(openssl rand -hex 32)";

# Changing this will log out all existing sessions.
\$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
\$wgUpgradeKey = "$(openssl rand -hex 16)";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
\$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
\$wgRightsUrl = "";
\$wgRightsText = "";
\$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
\$wgDiff3 = "/usr/bin/diff3";

## Default skin: you can change the default skin. Use the internal symbolic
## names, e.g. 'vector' or 'monobook':
\$wgDefaultSkin = "vector-2022";

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'MinervaNeue' );
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );

# Debug settings
\$wgShowExceptionDetails = true;
\$wgShowDBErrorBacktrace = true;
\$wgShowSQLErrors = true;
\$wgDebugDumpSql = true;

# End of automatically generated settings.
# Add more configuration options below.
EOF

# Create docker-compose.yml - based on your existing setup but with private instance naming
echo "Creating docker-compose.yml..."
cat > "${CONFIG_DIR}/docker-compose.yml" << 'EOF'
version: "3.8"
services:
  adnd2e-private:
    image: mediawiki:latest
    container_name: adnd2e-private
    hostname: adnd2e-private
    restart: unless-stopped
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - MEDIAWIKI_DB_TYPE=mysql
      - MEDIAWIKI_DB_HOST=adnd2e-private-db
      - MEDIAWIKI_DB_NAME=mediawiki_private
      - MEDIAWIKI_DB_USER=pawneemayor
      - MEDIAWIKI_DB_PASSWORD=password321
      - MEDIAWIKI_SITE_NAME=AD&D 2E Private Wiki
    volumes:
      - /opt/mediawiki/private/images:/var/www/html/images
      - /etc/localtime:/etc/localtime:ro
      - /opt/mediawiki/private/apache-config.conf:/etc/apache2/conf-enabled/servername.conf
    networks:
      - saltbox
    labels:
      com.github.saltbox.saltbox_managed: true
      traefik.enable: true
      traefik.http.routers.adnd2e-private-http.entrypoints: web
      traefik.http.routers.adnd2e-private-http.middlewares: globalHeaders@file,redirect-to-https@docker,robotHeaders@file,cloudflarewarp@docker
      traefik.http.routers.adnd2e-private-http.rule: Host(`adnd2e-private.mayorgergich.xyz`)
      traefik.http.routers.adnd2e-private-http.service: adnd2e-private
      traefik.http.routers.adnd2e-private.entrypoints: websecure
      traefik.http.routers.adnd2e-private.middlewares: globalHeaders@file,secureHeaders@file,robotHeaders@file,cloudflarewarp@docker
      traefik.http.routers.adnd2e-private.rule: Host(`adnd2e-private.mayorgergich.xyz`)
      traefik.http.routers.adnd2e-private.service: adnd2e-private
      traefik.http.routers.adnd2e-private.tls.certresolver: cfdns
      traefik.http.routers.adnd2e-private.tls.options: securetls@file
      traefik.http.services.adnd2e-private.loadbalancer.server.port: 80
    depends_on:
      - adnd2e-private-db

  adnd2e-private-db:
    image: mariadb:10.6
    container_name: adnd2e-private-db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=mediawiki_private
      - MYSQL_USER=pawneemayor
      - MYSQL_PASSWORD=password321
    volumes:
      - adnd2e_private_db_data:/var/lib/mysql
    networks:
      - saltbox

networks:
  saltbox:
    external: true

volumes:
  adnd2e_private_db_data:
EOF

# Create README.md
echo "Creating README.md..."
cat > "${CONFIG_DIR}/README.md" << EOF
# adnd2e-private

Private MediaWiki instance for AD&D 2E player information tracking.
EOF

# Start the containers
echo "Starting containers..."
cd ${CONFIG_DIR}
docker compose up -d

# Wait for containers to be ready
echo "Waiting for containers to initialize..."
sleep 30

# Initialize the database
echo "Initializing MediaWiki database..."
docker exec -it ${CONTAINER_NAME} php maintenance/install.php \
  --dbname=mediawiki_private \
  --dbserver=${DB_CONTAINER} \
  --dbuser=pawneemayor \
  --dbpass=password321 \
  --dbprefix=adnd2e_private \
  --installdbuser=pawneemayor \
  --installdbpass=password321 \
  --server=https://${DOMAIN} \
  --scriptpath="" \
  --pass=admin_password \
  --admin="admin" \
  "ADND2e-Private" 

# Copy the generated LocalSettings.php file back to our directory
echo "Backing up generated LocalSettings.php..."
docker cp ${CONTAINER_NAME}:/var/www/html/LocalSettings.php ${CONFIG_DIR}/LocalSettings.php.generated

# Copy our customized LocalSettings.php to the container
echo "Copying customized LocalSettings.php to container..."
docker cp ${CONFIG_DIR}/LocalSettings.php ${CONTAINER_NAME}:/var/www/html/LocalSettings.php

# Set proper permissions
echo "Setting correct permissions..."
docker exec ${CONTAINER_NAME} chmod 644 /var/www/html/LocalSettings.php
docker exec ${CONTAINER_NAME} chown www-data:www-data /var/www/html/LocalSettings.php

# Set permissions for images directory
echo "Setting permissions for images directory..."
docker exec ${CONTAINER_NAME} chown -R www-data:www-data /var/www/html/images

# Restart the container to apply settings
echo "Restarting container to apply settings..."
docker restart ${CONTAINER_NAME}

echo "=== Setup complete! ==="
echo "Your private wiki should be available at https://${DOMAIN}"
echo "You can log in with the username 'admin' and password 'admin_password'"
echo ""
echo "IMPORTANT NOTE: To update LocalSettings.php in the future, copy it directly into the container:"
echo "  docker cp ${CONFIG_DIR}/LocalSettings.php ${CONTAINER_NAME}:/var/www/html/"
echo "  docker exec ${CONTAINER_NAME} chmod 644 /var/www/html/LocalSettings.php"
echo "  docker exec ${CONTAINER_NAME} chown www-data:www-data /var/www/html/LocalSettings.php"
echo ""
echo "To check container status, run:"
echo "  docker ps | grep ${CONTAINER_NAME}"
echo ""
echo "To view logs, run:"
echo "  docker logs ${CONTAINER_NAME}"
